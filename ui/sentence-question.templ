package ui

import "github.com/amrojjeh/kalam"

func NewSentenceQuestionViewModel(nsvm NahwSentenceViewModel) SentenceQuestionViewModel {
	m := SentenceQuestionViewModel{
		Words: []SentenceWordViewModel{},
		Choices: make([]NahwCardViewModel, 4),
	}

	for i, w := range nsvm.Iter.Sentence().Words {
		var wm SentenceWordViewModel
		if w.Quizzable() {
			wm = SentenceWordViewModel{
				Base: w.Base().Unpointed(true),
				Termination: w.Termination().Unpointed(true),
				Active: i == nsvm.Iter.WordI,
			}
		} else {
			wm = SentenceWordViewModel{
				Base: w.Unpointed(true),
				Termination: "",
				Active: false,
			}
		}
		if !w.Preceding {
			wm.Space = " "
		}

		m.Words = append(m.Words, wm)
	}

	activeTerm := nsvm.Iter.Word().Termination()
	activeTermStr := activeTerm.Unpointed(true)
	if activeTerm.Vowel == kalam.Dammatan ||
		activeTerm.Vowel == kalam.Kasratan ||
		activeTerm.Vowel == kalam.Fathatan {
		m.Choices[0] = NewNahwCardViewModel(nsvm.SelectCardURL + "0", activeTermStr + string(kalam.Dammatan), "1")
		m.Choices[1] = NewNahwCardViewModel(nsvm.SelectCardURL + "1", activeTermStr + string(kalam.Fathatan), "2")
		m.Choices[2] = NewNahwCardViewModel(nsvm.SelectCardURL + "2", activeTermStr + string(kalam.Kasratan), "3")
	} else {
		m.Choices[0] = NewNahwCardViewModel(nsvm.SelectCardURL + "0", activeTermStr + string(kalam.Damma), "1")
		m.Choices[1] = NewNahwCardViewModel(nsvm.SelectCardURL + "1", activeTermStr + string(kalam.Fatha), "2")
		m.Choices[2] = NewNahwCardViewModel(nsvm.SelectCardURL + "2", activeTermStr + string(kalam.Kasra), "3")
	}
	m.Choices[3] = NewNahwCardViewModel(nsvm.SelectCardURL + "3", activeTermStr + string(kalam.Sukoon), "4")

	if nsvm.SelectedCard >= 0 && nsvm.SelectedCard < 4 {
		m.Choices[nsvm.SelectedCard].State = NahwCardSelected
		m.Words[nsvm.Iter.WordI].Termination = m.Choices[nsvm.SelectedCard].Value
	}
	return m
}


type SentenceQuestionViewModel struct {
	Words []SentenceWordViewModel
	Choices []NahwCardViewModel
}

type SentenceWordViewModel struct {
	Base string
	Termination string
	Active bool
	Space string
}

templ SentenceQuestion(m SentenceQuestionViewModel) {
	<div class="sentence-question">
		@sentence(m)
		<div class="cards">
			for _, c := range m.Choices {
				@NahwCard(c)
			}
		</div>
	</div>
}

templ sentence(m SentenceQuestionViewModel) {
	<p class="text">
		for _, w := range m.Words {
			<span>{w.Base}</span><span
			class={"nahw-highlight", templ.KV("-active", w.Active)}>{w.Termination}</span><span>{w.Space}</span>
		}
	</p>
}
